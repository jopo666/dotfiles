{
    "import": {
        "prefix": "imp",
        "body": "import \"${1:package}\""
    },
    "struct": {
        "prefix": "str",
        "body": "type ${1:name} struct {\n\t$0\n}"
    },
    "function": {
        "prefix": "fun",
        "body": "func $1($2) $3 {\n\t$0\n}"
    },
    "switch": {
        "prefix": "swi",
        "body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}"
    },
    "select": {
        "prefix": "sel",
        "body": "select {\ncase ${1:condition}:\n\t$0\n}"
    },
    "interface": {
        "prefix": "int",
        "body": "type ${1:name} interface {\n\t$0\n}"
    },
    "for": {
        "prefix": "for",
        "body": "for ${1}{\n\t$0\n}"
    },
    "for n": {
        "prefix": "fori",
        "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}"
    },
    "for range": {
        "prefix": "forr",
        "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}"
    },
    "map declaration": {
        "prefix": "map",
        "body": "map[${1:type}]${2:type}"
    },
    "if statement": {
        "prefix": "if",
        "body": "if ${1:condition} {\n\t$0\n}"
    },
    "if else statement": {
        "prefix": "ife",
        "body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}"
    },
    "if err != nil": {
        "prefix": "ie",
        "body": "if err != nil {\n\treturn ${1:nil}, ${2:err}\n}"
    },
    "if key in a map": {
        "prefix": "im",
        "body": "if ${1:value}, ok := ${2:map}[${3:key}]; ok {\n\t$4\n}"
    },
    "fmt.Println": {
        "prefix": "fmtl",
        "body": "fmt.Println(\"$1\")"
    },
    "fmt.Printf": {
        "prefix": "fmtf",
        "body": "fmt.Printf(\"$1\", ${2:var})"
    },
    "log.Println": {
        "prefix": "debug",
        "body": "logs.Debug(\"$1\")"
    },
    "log.Println": {
        "prefix": "info",
        "body": "logs.Info(\"$1\")"
    },
    "log.Println": {
        "prefix": "warn",
        "body": "logs.Warn(\"$1\")"
    },
    "log.Println": {
        "prefix": "error",
        "body": "logs.Error(\"$1\")"
    },
    "test": {
        "prefix": "test",
        "body": "func Test$1(t *testing.T) {\n\t$0\n}"
    },
    "benchmark": {
        "prefix": "bench",
        "body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}"
    },
    "method declaration": {
        "prefix": ["meth", "funm"],
        "body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}"
    },
    "hello world web app": {
        "prefix": "helloweb",
        "body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
   }
}
